import type { URLResult } from "./url";
import type { HttpClient, HttpRequestOptions } from "./http.types";
type ToString = string | URLResult;
/**
 *
 *
 * @export
 * @class SimpleJsonHttp
 */
export declare class SimpleJsonHttp {
    client: HttpClient;
    /**
     * Creates an instance of SimpleJsonHttp.
     * @param {HttpClient} client
     * @memberof SimpleJsonHttp
     */
    constructor(client?: HttpClient);
    /**
     *
     *
     * @template T
     * @param {ToString} url
     * @return {Promise<T>}
     * @memberof SimpleJsonHttp
     */
    get<T>(url: ToString): Promise<T>;
    /**
     *
     *
     * @template T
     * @param {ToString} url
     * @param {*} [body]
     * @return {Promise<T>}
     * @memberof SimpleJsonHttp
     */
    post<T>(url: ToString, body?: any): Promise<T>;
    /**
     *
     *
     * @template T
     * @param {ToString} url
     * @param {*} [body]
     * @return {Promise<T>}
     * @memberof SimpleJsonHttp
     */
    put<T>(url: ToString, body?: any): Promise<T>;
    /**
     *
     *
     * @template T
     * @param {ToString} url
     * @param {*} [body]
     * @return {Promise<T>}
     * @memberof SimpleJsonHttp
     */
    patch<T>(url: ToString, body?: any): Promise<T>;
    /**
     *
     *
     * @template T
     * @param {ToString} url
     * @param {*} [body]
     * @return {Promise<T>}
     * @memberof SimpleJsonHttp
     */
    delete<T>(url: ToString, body?: any): Promise<T>;
    /**
     *
     * @template T
     * @param {string} method
     * @param {string} url
     * @param {*} [body]
     * @return {Promise<T>} Promise<T>
     * @memberof SimpleJsonHttp
     */
    simpleRequest<T>(method: string, url: string, body?: any): Promise<T>;
    /**
     *
     * @template T
     * @param {HttpRequestOptions} option
     * @return {Promise<T>} Promise<T>
     * @memberof SimpleJsonHttp
     */
    request<T>(option: HttpRequestOptions): Promise<T>;
}
export {};
